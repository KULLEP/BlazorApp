@page "/epic"
@inject HttpClient Http

<PageTitle>EPIC</PageTitle>

<Header Text="EPIC" />

<p>Earth Polychromatic Imaging Camera</p>

<div class="row justify-content-center">
    <button type="button" class="btn btn-outline-primary col-3 mx-2" @onclick="@(() => getDataAsync(request[0]))">Natural</button>
    <button type="button" class="btn btn-outline-success col-3 mx-2"
        @onclick="@(() => getDataAsync(request[1]))">Enchanced</button>
</div>

@if (forecasts == null)
{
    <Loader />
}
else
{
    <div class="card-deck row justify-content-center">
        @foreach (var forecast in forecasts)
        {
            <div class="card col-3 m-3 p-0">
                <a href=@forecast.imageUrl target="_blank">
                    <img class="card-img-top col-3" src=@forecast.imageUrl alt="..." />
                </a>
                <div class="card-body">
                    <h5 class="card-title">@forecast.identifier</h5>
                    <p class="card-text">@forecast.caption</p>
                </div>
                <div class="card-footer">
                    <small class="text-muted">@forecast.date</small>
                </div>
            </div>
        }
    </div>
}

@code {
    private NasaNatural[]? forecasts;
    private string token = GlobalData.token;
    protected string[] request = { "natural", "enhanced" };
    protected async Task getDataAsync(string request)
    {
        forecasts = null;
        forecasts = await
        Http.GetFromJsonAsync<NasaNatural[]>($"https://api.nasa.gov/EPIC/api/{request}?api_key={token}");
        if (forecasts != null)
        {
            foreach (var forecast in forecasts)
            {
                forecast.dateTime = DateTime.ParseExact(forecast.date, "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
                var month = forecast.dateTime.Month.ToString("00");
                var day = forecast.dateTime.Day.ToString("00");
                forecast.imageUrl =
                $"https://epic.gsfc.nasa.gov/archive/{request}/{forecast.dateTime.Year}/{month}/{day}/jpg/{forecast.image}.jpg";
            }
        }
    } 
 protected override async Task OnInitializedAsync()
    {
        await getDataAsync("natural");
    }
    public class NasaNatural
    {
        public string identifier { get; set; }
        public string caption { get; set; }
        public string date { get; set; }
        public string image { get; set; }
        public string imageUrl = "";
        public DateTime dateTime = new DateTime();
    }
}
